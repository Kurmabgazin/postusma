import asyncio
import re
import logging
import uuid
import pandas as pd
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ContentType
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
)
from aiogram.filters import CommandStart, Command

API_TOKEN = '7796410844:AAGeLfSf2tXWB-yk0Gte_UxaCCF5px7ajNs'
OWNER_ID = 434772555  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

logging.basicConfig(level=logging.INFO)

orders = []

def normalize_phone(phone: str) -> str:
    return re.sub(r'\D', '', phone)

def normalize_text(text: str) -> str:
    return text.strip().lower()

def load_orders_from_file(file_path: str):
    global orders
    try:
        df = pd.read_excel(file_path)
        orders.clear()
        for _, row in df.iterrows():
            phone = normalize_phone(str(row.get("–¢–µ–ª–µ—Ñ–æ–Ω", "")))
            fio = str(row.get("–§–ò–û", "")).strip()
            track = str(row.get("–¢—Ä–µ–∫", "")).strip()
            date = str(row.get("–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", "")).strip()
            if phone or fio:
                orders.append({
                    "phone": phone,
                    "fio": fio,
                    "track": track,
                    "date": date
                })
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ {file_path}")
        return True, f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}"

user_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–¢—Ä–µ–∫–∏")],
        [KeyboardButton(text="–ò–Ω—Ñ–æ")],
        [KeyboardButton(text="–°–∫–∏–¥–∫–∏")]
    ],
    resize_keyboard=True
)

phone_request_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

admin_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤")],
        [KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")]
    ],
    resize_keyboard=True
)

back_to_menu_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

async def start_handler(message: Message):
    if message.from_user.id == OWNER_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=admin_menu)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=user_menu)

async def help_handler(message: Message):
    await message.answer(
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "–ò–Ω—Ñ–æ ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å\n"
        "–°–∫–∏–¥–∫–∏ ‚Äî —Ç–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏\n"
        "–¢—Ä–µ–∫–∏ ‚Äî –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –§–ò–û\n"
        "\n–î–ª—è –∞–¥–º–∏–Ω–∞:\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å Excel-—Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–∞–º–∏\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ ‚Äî —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n"
        "–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏ ‚Äî –≤—ã–π—Ç–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é"
    )

async def info_handler(message: Message):
    await message.answer(
        "–ú—ã ‚Äî –±—Ä–µ–Ω–¥ —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π —Å –ª—é–±–æ–≤—å—é ‚ù§Ô∏è\n\n"
        "üìç –†–∞–±–æ—Ç–∞–µ–º –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É\n"
        "üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ 1‚Äì2 –¥–Ω—è\n"
        "üì± –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º ‚Äî –ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É"
    )

async def discount_handler(message: Message):
    await message.answer("üéâ –°–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ!")

async def tracks_menu_handler(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –§–ò–û, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=phone_request_kb
    )

async def handle_contact(message: Message):
    phone = normalize_phone(message.contact.phone_number)
    await send_order_info(phone, message)

async def send_order_info(query: str, message: Message):
    normalized_phone = normalize_phone(query)
    normalized_fio = normalize_text(query)

    found_orders = []
    for order in orders:
        if normalized_phone and order["phone"] == normalized_phone:
            found_orders.append(order)
        elif normalized_fio and normalize_text(order["fio"]) == normalized_fio:
            found_orders.append(order)

    if found_orders:
        response = ""
        for idx, order in enumerate(found_orders, start=1):
            response += (
                f"–ó–∞–∫–∞–∑ #{idx}:\n"
                f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {order['track']}\n"
                f"üë§ –§–ò–û: {order['fio']}\n"
                f"üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {order['date']}\n\n"
            )
        await message.answer(response.strip())
    else:
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –§–ò–û –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def handle_document(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã.")
        return

    document = message.document
    if not document.file_name.endswith(('.xlsx', '.xls')):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls)")
        return

    file_path = f"temp_{uuid.uuid4()}.xlsx"
    file = await message.bot.download(document, destination=file_path)

    success, msg = load_orders_from_file(file_path)
    await message.answer(msg)

async def handle_admin_commands(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return

    text = message.text.strip().lower()
    if text == "–∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–∞–º–∏ (.xlsx –∏–ª–∏ .xls).")
    elif text == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤":
        await message.answer(f"–í –±–∞–∑–µ —Å–µ–π—á–∞—Å {len(orders)} –∑–∞–∫–∞–∑–æ–≤.")
    elif text == "–≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏":
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=user_menu)
    else:
        await handle_text(message)

async def handle_text(message: Message):
    if message.from_user.id == OWNER_ID and message.text.strip().lower() in [
        "–∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã", "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", "–≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"
    ]:
        await handle_admin_commands(message)
        return

    text = message.text.strip().lower()
    if text == "–∏–Ω—Ñ–æ":
        await info_handler(message)
    elif text == "—Å–∫–∏–¥–∫–∏":
        await discount_handler(message)
    elif text == "—Ç—Ä–µ–∫–∏":
        await tracks_menu_handler(message)
    elif text == "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if message.from_user.id == OWNER_ID:
            await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=admin_menu)
        else:
            await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=user_menu)
    else:
        await send_order_info(text, message)

async def main():
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()

    dp.message.register(start_handler, CommandStart())
    dp.message.register(help_handler, Command("help"))
    dp.message.register(handle_contact, F.content_type == ContentType.CONTACT)
    dp.message.register(handle_document, F.content_type == ContentType.DOCUMENT)
    dp.message.register(handle_text)

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
